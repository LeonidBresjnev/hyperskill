type: edu
custom_name: stage5
files:
- name: src/budget/Main.java
  visible: true
  text: |-
    package budget;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.ArrayList;
    import java.util.stream.Collectors;
    import java.util.stream.IntStream;
    import java.util.List;
    import java.io.IOException;
    import java.io.FileWriter;

    class purchase {
        final private String thing;
        final private double price;

        purchase(String thing, double price) {
            this.thing = thing;
            this.price = price;
        }

        String getThing() {
            return this.thing;
        }

        double getPrice() {
            return this.price;
        }

    }
    class Main{
        static java.util.Scanner myScanner = new java.util.Scanner(System.in);
        static List<String> types = new ArrayList<>(java.util.Arrays.asList("Food", "Clothes", "Entertainment","Other"));
        static java.util.Map<String,List<purchase>> allLists = new java.util.HashMap<>();
        static File myfile = null;
        static java.util.Scanner fileScanner = null;

        static void save() {
            try {
                myfile = new File("purchases.txt");
                boolean newFile = myfile.createNewFile();
            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
            try {
                FileWriter myWriter = new FileWriter("purchases.txt");
                myWriter.write(Double.toString(balance)+ "\n");
                for (String myType : types) {
                    if (allLists.containsKey(myType)) {
                        for (purchase myPurchase : allLists.get(myType)) {
                            myWriter.write(myType + " " + myPurchase.getPrice() + " " + myPurchase.getThing() + "\n");
                        }
                    }
                }
                myWriter.close();
                System.out.println("Purchases were saved!");
            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }
        }

        static void load() {
            //clear existing list;
            for (String myType : types) {
                if (allLists.containsKey(myType)) {
                    allLists.get(myType).clear();
                    allLists.remove(myType);
                }
            }
            try {
                myfile = new File("purchases.txt");
                fileScanner = new java.util.Scanner(myfile);
                if (fileScanner.hasNextLine()) {
                    balance = fileScanner.nextDouble();
                 //   fileScanner.nextLine();
                }
                while (fileScanner.hasNextLine()) {
                    String myType = fileScanner.next();
                    double myPrice = fileScanner.nextDouble();
                    String myThing = fileScanner.nextLine();

                    purchase myPurchase = new purchase(myThing, myPrice);
                    if (!allLists.containsKey(myType)) {
                        allLists.put(myType, new ArrayList<>());
                    }
                    allLists.get(myType).add(myPurchase);
                }
                fileScanner.close();
                System.out.println("Purchases were loaded!");
            } catch (FileNotFoundException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }


        }
        static void show() {
            if (allLists.isEmpty()) {
                System.out.println("The purchase list is empty");
            } else {
                do {
                    System.out.println("Choose the type of purchases");
                    int bound = types.size();
                    IntStream.range(0, bound).mapToObj(i -> i + 1 + ") " + types.get(i)).forEach(System.out::println);
                    System.out.print("5) All\n6) Back\n");
                    short input = myScanner.nextShort();
                    myScanner.nextLine();
                    System.out.println();
                    if (input == 6) {
                        break;
                    } else if (input <= 4) {
                        String type = types.get(input - 1);
                        if (allLists.isEmpty()) {
                            System.out.println("\nThe purchase list is empty!");
                        } else if (allLists.containsKey(type)) {
                            double total = 0d;
                            System.out.println(type);
                            for (purchase myPurchase : allLists.get(type)) {
                                System.out.println(myPurchase.getThing().trim() + " $" + String.format("%.02f", myPurchase.getPrice()));
                                total += myPurchase.getPrice();
                            }
                            System.out.printf("Total sum: $%.02f\n", total);
                        } else {
                            System.out.println(type + ":\n The purchase list is empty!");
                        }
                    } else {
                        double total = 0d;
                        System.out.println("All:");
                        for (String myType : types) {
                            if (allLists.containsKey(myType)) {
                                for (purchase myPurchase : allLists.get(myType)) {
                                    System.out.println(myPurchase.getThing().trim() + " $" + String.format("%.02f", myPurchase.getPrice()));
                                    total += myPurchase.getPrice();
                                }
                            }
                        }
                        System.out.printf("Total: $%.02f\n", total);
                    }
                    System.out.println();
                } while (true);
            }
        }

        static void buy() {
            do {
                System.out.println("\nChoose the type of purchase");
                IntStream.range(0, types.size()).mapToObj(i -> i + 1 + ") " + types.get(i)).forEach(System.out::println);
                System.out.println("5) Back");
                short input = myScanner.nextShort();
                System.out.println();
                if (input == 5) {
                    break;
                } else {
                    if (!allLists.containsKey(types.get(input - 1))) {
                        allLists.put(types.get(input - 1), new ArrayList<>());
                    }
                    System.out.println("Enter purchase name:");
                    String thing = myScanner.next() + myScanner.nextLine();
                    System.out.println("Enter its price:");
                    double price =  myScanner.nextDouble();
                    purchase Mypurchase = new purchase(thing, price);
                    allLists.get(types.get(input - 1)).add(Mypurchase);
                    balance -= price;
                    System.out.println("Purchase was added!");
                }
                System.out.println();
            } while (true) ;
        }

        static void analyze() {
            do {
                System.out.println("How do you want to sort?\n" +
                        "1) Sort all purchases\n" +
                        "2) Sort by type\n" +
                        "3) Sort certain type\n" +
                        "4) Back");

                short input = myScanner.nextShort();
                myScanner.nextLine();
                System.out.println();
                if (input == 1) {
                    double total = 0d;
                    List<String> templist = new ArrayList<>();
                    for (String myType : types) {
                        if (allLists.containsKey(myType)) {
                            for (purchase myPurchase : allLists.get(myType)) {
                                templist.add(myPurchase.getThing().trim() + " $" + String.format("%.02f", myPurchase.getPrice()));
                                total += myPurchase.getPrice();
                            }
                        }
                    }
                    System.out.println("All:");
                    templist.stream().sorted().collect(Collectors.toList()).forEach(System.out::println);
                    System.out.printf("Total: $%.02f\n", total);
                } else if (input == 2) {
                    double grandtotal = 0d;
                    System.out.println("Types:");
                    for (String myType : types) {
                        if (allLists.containsKey(myType)) {
                            double total = 0d;
                            for (purchase myPurchase : allLists.get(myType)) {
                                total += myPurchase.getPrice();
                            }
                            grandtotal += total;
                            System.out.printf(myType + " $%.02f\n", total);
                        }
                        System.out.printf("All $%.02f\n", grandtotal);
                    }
                } else if (input == 3) {
                    System.out.println("Choose the type of purchase\n" +
                            "1) Food\n" +
                            "2) Clothes\n" +
                            "3) Entertainment\n" +
                            "4) Other");
                    double total = 0d;
                    input = myScanner.nextShort();
                    myScanner.nextLine();
                    System.out.println();
                    if (allLists.containsKey(types.get(input - 1))) {
                        List<String> templist = new ArrayList<>();
                        for (purchase myPurchase : allLists.get(types.get(input - 1))) {
                            templist.add(myPurchase.getThing().trim() + " $" + String.format("%.02f", myPurchase.getPrice()));
                            total += myPurchase.getPrice();
                        }
                        templist.stream().sorted().collect(Collectors.toList()).forEach(System.out::println);
                        System.out.printf("Total: $%.02f\n", total);
                    }


                } else {
                    break;
                }

            } while (true);
        }

        static double balance = 0d;

        public static void main(String[] args) {
            boolean onemore = true;
            do {
                System.out.println();
                System.out.print("Choose your action:\n" +
                        "1) Add income\n" +
                        "2) Add purchase\n" +
                        "3) Show list of purchases\n" +
                        "4) Balance\n" +
                        "5) Save\n" +
                        "6) Load\n" +
                        "7) Analyze (Sort)\n" +
                        "0) Exit\n");
                short choice = myScanner.nextShort();
                myScanner.nextLine();
                System.out.println("\n");
                switch (choice) {
                    case (0): {onemore = false;
                        break;}
                    case (1): {
                        System.out.println("Enter income:");
                        balance += myScanner.nextDouble();
                        System.out.println("Income was added!");
                        break;
                    }
                    case (2): {buy();
                        break;}
                    case (3): {show();
                        break;}
                    case (4): {System.out.printf("Balance: $%.02f\n", balance);
                        break;}
                    case (5): {save();
                        break;}
                    case (6): {load();break;}
                    case (7): {analyze();break;}
                }
            } while (onemore);
            System.out.println("Bye!\n");
        }
    }
  learner_created: false
- name: purchases.txt
  visible: true
  text: |
    785.64
    Food 35.43 Almond 250g
    Food 3.5 Milk
    Food 5.99 Red Fuji Apple
    Food 3.99 Eggs
    Food 25.98 FIJI Natural Artesian Water
    Food 8.54 Hershey's milk chocolate bars
    Food 1.0 Great Value Broccoli Florets
    Food 6.28 Keystone Ground Bee
    Clothes 8.61 Gildan LT
    Clothes 13.0 Men's Dual Defense Crew Socks 12 Pairs
    Clothes 19.97 Wrangler Men's Stretch Cargo Pant
    Entertainment 10.1 LEGO DUPLO Town Farm Animals
    Entertainment 8.73 Cinema
    Entertainment 30.0 Skate rental
    Other 19.74 Sensodyne Pronamel Toothpaste
    Other 10.0 Chick-fil-A $10 Gift Card
    Other 3.5 Debt
  learner_created: false
- name: test/BudgetManagerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BudgetManagerTest extends StageTest<String> {


        @Override
        public List<TestCase<String>> generate() {
            return List.of(

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test1),

                    new TestCase<String>()
                            .setInput("0\n")
                            .setCheckFunc(BudgetManagerTest::test2),

                    new TestCase<String>()
                            .setInput("4\n0")
                            .setCheckFunc(BudgetManagerTest::test3),

                    new TestCase<String>()
                            .setInput("1\n400\n4\n1\n200\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test4),

                    new TestCase<String>()
                            .setInput("1\n1000\n2\n" +
                                    "1\nAlmond 250g\n35.43\n" +
                                    "1\nMilk\n3.50\n" +
                                    "1\nRed Fuji Apple\n5.99\n" +
                                    "1\nEggs\n3.99\n" +
                                    "1\nFIJI Natural Artesian Water\n25.98\n" +
                                    "1\nHershey's milk chocolate bars\n8.54\n" +
                                    "1\nGreat Value Broccoli Florets\n1.00\n" +
                                    "1\nKeystone Ground Bee\n6.28\n" +
                                    "2\nGildan LT\n8.61\n" +
                                    "2\nMen's Dual Defense Crew Socks 12 Pairs\n13.00\n" +
                                    "2\nWrangler Men's Stretch Cargo Pant\n19.97\n" +
                                    "3\nLEGO DUPLO Town Farm Animals\n10.10\n" +
                                    "3\nCinema\n8.73\n" +
                                    "3\nSkate rental\n30\n" +
                                    "4\nSensodyne Pronamel Toothpaste\n19.74\n" +
                                    "4\nChick-fil-A $10 Gift Card\n10\n" +
                                    "4\nDebt\n3.50\n" +
                                    "5\n5\n0")
                            .setCheckFunc(BudgetManagerTest::test5),

                    new TestCase<String>()
                            .setInput("6\n4\n3\n5\n1\n6\n0")
                            .setCheckFunc(BudgetManagerTest::test6),

                    new TestCase<String>()
                            .setInput("7\n1\n2\n3\n4\n4\n6\n7\n1\n2\n3\n1\n4\n0")
                            .setCheckFunc(BudgetManagerTest::test7)
            );
        }


        //Checking program stop
        private static CheckResult test1(String reply, String attach) {
            if (!reply.contains("Bye!")) {
                return new CheckResult(false,
                        "Your program should stop after choosing \"Exit\"");
            }
            return new CheckResult(true);
        }


        //Checking menu
        private static CheckResult test2(String reply, String attach) {
            String[] menuPatterns = {"1)", "2)", "3)", "4)", "0)"};
            for (String menuPattern : menuPatterns) {
                if (!reply.contains(menuPattern)) {
                    return new CheckResult(false,
                            "Your menu doesn't have item " + menuPattern);
                }
            }
            return new CheckResult(true);
        }


        //Checking balance
        private static CheckResult test3(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 4) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 4\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balance = blocks[1];

            if (!balance.toLowerCase().contains("balance")) {
                return new CheckResult(false,
                        "Your program should show balance after choosing 4th item");
            }

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(balance);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Your balance should contain a number!");
            }

            double balanceDouble = Double.parseDouble(matcher.group());

            if (Math.abs(balanceDouble - 0) > 0.0001) {
                System.out.println(balance);
                return new CheckResult(false,
                        "Balance should be $0.00 at the beginning");
            }

            return new CheckResult(true);
        }


        //Checking adding income
        private static CheckResult test4(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 10) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 10\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterFirstAddingIncome = blocks[3];

            if (!balanceAfterFirstAddingIncome.contains("$400")) {
                return new CheckResult(false,
                        "Balance is wrong after adding income!.\n" +
                                "Expected:\n" +
                                "Balance: $400.00\n" +
                                "Your output:\n" +
                                balanceAfterFirstAddingIncome);
            }

            return new CheckResult(true);
        }

        //Checking the saving purchases
        private static CheckResult test5(String reply, String attach) {
            File file = new File("purchases.txt");
            if (!file.exists()) {
                return new CheckResult(false,
                        "Your program should create purchase.txt file and save purchases there!");
            }
            return new CheckResult(true);
        }

        //Checking the downloading purchases
        private static CheckResult test6(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 12) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 12\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String balanceAfterDownloadingPurchases = blocks[3];

            if (!balanceAfterDownloadingPurchases.replace(",", ".").contains("785.64")) {
                return new CheckResult(false,
                        "Your program reads balance from file wrong!");
            }

            //All purchases list

            String allPurchases = blocks[6];

            String[] expectedPurchases = {
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28",
                    "Gildan LT $8.61",
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00",
                    "Wrangler Men's Stretch Cargo Pant $19.97",
                    "LEGO DUPLO Town Farm Animals $10.10",
                    "Cinema $8.73",
                    "Skate rental $30.00",
                    "Sensodyne Pronamel Toothpaste $19.74",
                    "Chick-fil-A $10 Gift Card $10.00",
                    "Debt $3.50"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!allPurchases.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your all purchases list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            String[] temp = allPurchases.split("\n");
            String totalSum = temp[temp.length - 1];

            Pattern doublePattern = Pattern.compile("\\d+[,.]\\d+");
            Matcher matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of all purchases is wrong. Expected:\n" +
                                "Total sum: $214.36\n" +
                                "Your output:\n" +
                                totalSum);
            }

            double allTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(allTotalSum - 214.36) > 0.0001) {
                return new CheckResult(false,
                        "Your all total sum is wrong!");
            }

            //Food list

            String foodList = blocks[8];

            expectedPurchases = new String[]{
                    "Almond 250g $35.43",
                    "Milk $3.50",
                    "Red Fuji Apple $5.99",
                    "Eggs $3.99",
                    "FIJI Natural Artesian Water $25.98",
                    "Hershey's milk chocolate bars $8.54",
                    "Great Value Broccoli Florets $1.00",
                    "Keystone Ground Bee $6.28"
            };

            for (String expectedPurchase : expectedPurchases) {
                if (!foodList.contains(expectedPurchase)) {
                    return new CheckResult(false,
                            "Your food list doesn't have purchase:\n" +
                                    expectedPurchase + "\n" +
                                    "But should have!");
                }
            }

            temp = foodList.split("\n");
            totalSum = temp[temp.length - 1];

            matcher = doublePattern.matcher(totalSum);

            if (!matcher.find()) {
                return new CheckResult(false,
                        "Total sum of food list is wrong. Expected:\n" +
                                "Total sum: $90.71\n" +
                                "Your output:\n" + totalSum);
            }

            double foodTotalSum = Double.parseDouble(matcher.group());

            if (Math.abs(foodTotalSum - 90.71) > 0.0001) {
                return new CheckResult(false,
                        "Your food total sum is wrong!");
            }

            return new CheckResult(true);
        }


        //Sorting check
        private static CheckResult test7(String reply, String attach) {

            String[] blocks = reply.split("\n(\n+)?\n");

            if (blocks.length != 22) {
                return new CheckResult(false,
                        "Your program shows wrong blocks of output. Expected: 22\n" +
                                "You have: " + blocks.length + "\n" +
                                "Make sure that you print an empty line after each chosen action");
            }

            String sortEmptyAllPurchases = blocks[2];

            if (!sortEmptyAllPurchases.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort all purchases\" item shouldn't work if there are no purchases in the list.\n" +
                                "You should print 'List is empty!'");
            }

            String sortByEmptyType = blocks[4];

            if (sortByEmptyType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort by type\" item should work even if there are no purchases in the list\n" +
                                "You should print each category with total sum $0\n" +
                                "Your output shouldn't contain 'List is empty!'");
            }

            String sortEmptyCertainType = blocks[7];

            if (!sortEmptyCertainType.contains("list is empty")) {
                return new CheckResult(false,
                        "\"Sort certain type\" item shouldn't work if there are no purchases in the certain list\n" +
                                "You should print 'List is empty'");
            }

            String allSorted = blocks[13];
            String rightSorted = "Almond 250g $35.43\n" +
                    "Skate rental $30.00\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Wrangler Men's Stretch Cargo Pant $19.97\n" +
                    "Sensodyne Pronamel Toothpaste $19.74\n" +
                    "Men's Dual Defense Crew Socks 12 Pairs $13.00\n" +
                    "LEGO DUPLO Town Farm Animals $10.10\n" +
                    "Chick-fil-A $10 Gift Card $10.00\n" +
                    "Cinema $8.73\n" +
                    "Gildan LT $8.61\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Debt $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!allSorted.contains(rightSorted)) {
                return new CheckResult(false,
                        "Your program sort all purchases wrong!\n" +
                                "Expected:\n" +
                                rightSorted + "\n" +
                                "Your output:\n" +
                                allSorted);
            }


            String sortedByType = blocks[15];
            String rightSortedByType = "Food - $90.71\n" +
                    "Entertainment - $48.83\n" +
                    "Clothes - $41.58\n" +
                    "Other - $33.24";

            if (!sortedByType.contains(rightSortedByType)) {
                return new CheckResult(false,
                        "Your program sort by type wrong!\n" +
                                "Expected:\n" +
                                rightSortedByType + "\n" +
                                "Your output:\n" +
                                sortedByType);
            }

            String sortedCertainType = blocks[18];
            String rightSortedCertainType = "Almond 250g $35.43\n" +
                    "FIJI Natural Artesian Water $25.98\n" +
                    "Hershey's milk chocolate bars $8.54\n" +
                    "Keystone Ground Bee $6.28\n" +
                    "Red Fuji Apple $5.99\n" +
                    "Eggs $3.99\n" +
                    "Milk $3.50\n" +
                    "Great Value Broccoli Florets $1.00";

            if (!sortedCertainType.contains(rightSortedCertainType)) {
                return new CheckResult(false,
                        "Your program sort certain type wrong!\n" +
                                "Expected:\n" +
                                rightSortedCertainType + "\n" +
                                "Your output:\n" +
                                sortedCertainType);
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/76/stages/425/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 26 Nov 2021 22:20:25 UTC
record: 4
