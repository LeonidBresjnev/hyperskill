type: edu
custom_name: stage2
files:
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;

    import java.util.*;

    public class Main {
        static java.util.Scanner scanner = new java.util.Scanner(System.in);
        static Map<String, ArrayList<String>> news = new HashMap<>(){{
            put("Mountains ", new ArrayList<>(Arrays.asList("Sia", "Diplo", "Labrinth")));
            put("Runaway",  new ArrayList<>(List.of("Lil Peep")));
            put("The Greatest Show",  new ArrayList<>(List.of("Panic! At The Disco")));
            put("All Out Life",  new ArrayList<>(List.of("Slipknot")));
        }};
        static Map<String, ArrayList<String>> playlists = new HashMap<>(){{
            put("Mood", new ArrayList<>(Arrays.asList("Walk Like A Badass" +
                    "Rage Beats" +
                    "Arab Mood Booster" +
                    "Sunday Stroll")));
        }};
        static List<String> categories = new ArrayList<>(Arrays.asList("Top Lists", "Pop", "Mood", "Latin"));
        static List<String> featured = new ArrayList<>(Arrays.asList("Mellow Morning",
                "Wake Up and Smell the Coffee",
                "Monday Motivation",
                "Songs to Sing in the Shower"));
        public static void main(String[] args) {
            String input;

            boolean askagain = true;
            do {

                input = scanner.nextLine();
                switch (input) {
                    case "exit":  {askagain = false;
                        break;}
                    case "featured": {System.out.println("---FEATURED---");
                        featured.forEach(System.out::println);
                        break;}
                    case "categories ": {System.out.println("---CATEGORIES---");

                        categories.forEach(System.out::println);
                        break;}
                    case "new": {
                        System.out.println("---NEW RELEASES---");
                        news.forEach((k,v) -> System.out.println(k + v.toString()));
                        break;
                    }
                }
                if (input.startsWith("playlists ")) {
                    String selected = input.replaceAll("\\s+"," ").split(" ")[1];
                    System.out.println("---" + selected + " PLAYLISTS---");
                    playlists.get(selected).forEach(System.out::println);

                }
            } while (askagain);
            System.out.println("---GOODBYE!---");
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
    sourceCompatibility = JavaVersion.VERSION_14
    targetCompatibility = JavaVersion.VERSION_14
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.function.Function;

    class Attach {
        Function<String, CheckResult> func;

        Attach(Function<String, CheckResult> func) {
            this.func = func;
        }
    }

    public class MusicAdvisorTest extends StageTest<Attach> {

        @Override
        public List<TestCase<Attach>> generate() {
            return List.of(
                new TestCase<Attach>()
                    .setInput("auth\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---SUCCESS---")) {
                            return new CheckResult(false,
                                "There is no \"---SUCCESS---\" after \"auth\" but should be");
                        }
                        if (!reply.contains("https://accounts.spotify.com/authorize?")) {
                            return new CheckResult(false,
                                "There is no link after \"auth\" but should be");
                        }
                        if (reply.contains("a19ee7dbfda443b2a8150c9101bfd645")) {
                            return new CheckResult(false,
                                    "You shouldn't use the client_id from the example!! " +
                                            "You should create your own id on the spotify site.");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("new\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("featured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("auth\nnew\nfeatured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---NEW RELEASES---")) {
                            return new CheckResult(false,
                                "When \"new\" was inputted there should be \"---NEW RELEASES---\" line");
                        }
                        if (!reply.contains("---FEATURED---")) {
                            return new CheckResult(false,
                                "When \"featured\" was inputted there should be \"---FEATURED---\" line");
                        }
                        return CheckResult.correct();
                    }))

            );
        }

        @Override
        public CheckResult check(String reply, Attach clue) {
            return clue.func.apply(reply);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5478#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 28 Dec 2021 11:28:44 UTC
record: 2
